diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/SConstruct elua-svn-emBLOD/SConstruct
--- elua-svn.orig/SConstruct	2011-01-15 23:01:00.532199721 +0100
+++ elua-svn-emBLOD/SConstruct	2011-01-14 20:12:50.799600307 +0100
@@ -76,7 +76,7 @@
   'lpc288x' : { 'cpus' : [ 'LPC2888' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] },
   'str7' : { 'cpus' : [ 'STR711FR2' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] },
   'stm32' : { 'cpus' : [ 'STM32F103ZE', 'STM32F103RE' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] },
-  'avr32' : { 'cpus' : [ 'AT32UC3A0512', 'AT32UC3A0128', 'AT32UC3B0256' ], 'toolchains' : [ 'avr32-gcc' ] },
+  'avr32' : { 'cpus' : [ 'AT32UC3A0512', 'AT32UC3A0128', 'AT32UC3B0256', 'AT32UC3A0128_SDRAM' ], 'toolchains' : [ 'avr32-gcc' ] },
   'lpc24xx' : { 'cpus' : [ 'LPC2468' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] },
   'lpc17xx' : { 'cpus' : [ 'LPC1768' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] }
 }
@@ -101,6 +101,7 @@
                'ELUA-PUC' : ['LPC2468' ],
                'MBED' : ['LPC1768'],
                'MIZAR32' : [ 'AT32UC3A0128' ],
+               'MIZAR32_BLOD' : [ 'AT32UC3A0128' ],
             }

 cpu_list = sum([board_list[i] for i in board_list],[])
@@ -153,7 +154,8 @@
               'EAGLE-100' : [ 'bisect', 'hangman', 'lhttpd', 'led', 'hello', 'info' ],
               'ELUA-PUC' : [ 'bisect', 'hangman', 'led', 'hello', 'info', 'pwmled', 'adcscope', 'adcpoll', 'inttest' ],
               'MBED' : [ 'bisect', 'hangman', 'hello', 'info', 'led', 'pwmled', 'dualpwm', 'life', 'adcscope', 'adcpoll' ],
-              'MIZAR32' : [ ],
+              'MIZAR32' : [ 'hello' ],
+              'MIZAR32_BLOD' : [ 'bisect', 'hangman', 'hello', 'info', 'led', 'pwmled', 'dualpwm', 'life', 'adcscope', 'adcpoll' ],
 }

 comp = Environment( tools = [],
@@ -303,7 +305,7 @@

   # CPU/allocator mapping (if allocator not specified)
   if comp['allocator'] == 'auto':
-    if comp['board'] in ['LPC-H2888', 'ATEVK1100', 'MBED', 'MIZAR32']:
+    if comp['board'] in ['LPC-H2888', 'ATEVK1100', 'MBED', 'MIZAR32', 'MIZAR32_BLOD']:
       comp['allocator'] = 'multiple'
     else:
       comp['allocator'] = 'newlib'
diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/src/platform/avr32/at32uc3a0128_sdram.ld elua-svn-emBLOD/src/platform/avr32/at32uc3a0128_sdram.ld
--- elua-svn.orig/src/platform/avr32/at32uc3a0128_sdram.ld	1970-01-01 01:00:00.000000000 +0100
+++ elua-svn-emBLOD/src/platform/avr32/at32uc3a0128_sdram.ld	2011-01-14 20:40:00.327599689 +0100
@@ -0,0 +1,51 @@
+MEMORY
+{
+    sram (W!RX) : ORIGIN = 0x00000004, LENGTH = 0x00007FFC
+    sdram (W!RX) : ORIGIN = 0xd0000000, LENGTH = 0x02000000
+    flash (RX) : ORIGIN = 0x80002000, LENGTH = 0x00020000 - 0x2000
+}
+
+SECTIONS
+{
+    .text :
+    {
+        . = ALIGN(4);
+        _stext = .;
+        PROVIDE(stext = .);
+        KEEP(*(.start))
+        *(.text .text.*)
+        *(.rodata .rodata.*)
+        *(.gnu.linkonce.t.*)
+        *(.glue_7)
+        *(.glue_7t)
+        *(.gcc_except_table)
+        *(.gnu.linkonce.r.*)
+        *(.exception .exception.*)
+        . = ALIGN(4);
+        _etext = .;
+        PROVIDE(etext = .);
+    } >sdram
+
+    .data : AT (_etext)
+    {
+        . = ALIGN(4);
+        _data = .;
+        *(.ramfunc .ramfunc.* .fastrun .fastrun.*)
+        *(.data .data.*)
+        *(.gnu.linkonce.d.*)
+        . = ALIGN(4);
+        _edata = .;
+    } >sdram
+
+    .bss (NOLOAD) : {
+        _bss = .;
+        *(.bss .bss.*)
+        *(.gnu.linkonce.b.*)
+        *(COMMON)
+        . = ALIGN(4);
+        _ebss = .;
+    } >sdram
+
+    end = .;
+    _sstack = 0xd2000000;
+}
diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/src/platform/avr32/board.h elua-svn-emBLOD/src/platform/avr32/board.h
--- elua-svn.orig/src/platform/avr32/board.h	2011-01-15 22:59:47.576201600 +0100
+++ elua-svn-emBLOD/src/platform/avr32/board.h	2011-01-14 17:14:36.671600851 +0100
@@ -121,6 +121,6 @@
 #endif

 #define REQ_CPU_FREQ      60000000
-#define REQ_PBA_FREQ      15000000
+#define REQ_PBA_FREQ      30000000

 #endif  // _BOARD_H_
diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/src/platform/avr32/conf.py elua-svn-emBLOD/src/platform/avr32/conf.py
--- elua-svn.orig/src/platform/avr32/conf.py	2011-01-15 22:59:47.568197578 +0100
+++ elua-svn-emBLOD/src/platform/avr32/conf.py	2011-01-14 13:41:43.807601208 +0100
@@ -11,14 +11,21 @@
     comp.Append(CPPDEFINES = {'BOARD' : 2})
 elif comp[ 'board' ]  == "MIZAR32":
     specific_files += " sdramc.c"
+    #The sdramflag will be appended to the filename of the linker script. In this case src/platform/at32uc3a0128.ld will be used in order to allow "normal" flash execution.
+    sdramflag = ""
+    comp.Append(CPPDEFINES = {'BOARD' : 98})
+elif comp[ 'board' ]  == "MIZAR32_BLOD":
+    specific_files += " sdramc.c"
     comp.Append(CPPDEFINES = {'BOARD' : 98})
+    #The sdramflag will be appended to the filename of the linker script. In this case src/platform/at32uc3a0128_sdram.ld will be used in order to allow bootloading to SDRAM and execution there.
+    sdramflag = "_sdram"
 else:
     print "Invalid board for %s platform (%s)" %( platform, comp[ 'board' ] )
     sys.exit( -1 )

 # Prepend with path
 specific_files = " ".join( [ "src/platform/%s/%s" % ( platform, f ) for f in specific_files.split() ] )
-ldscript = "src/platform/%s/%s.ld" % ( platform, comp[ 'cpu' ].lower() )
+ldscript = "src/platform/%s/%s%s.ld" % ( platform, comp[ 'cpu' ].lower(), sdramflag )

 # Standard GCC Flags
 comp.Append(CCFLAGS = ['-ffunction-sections','-fdata-sections','-fno-strict-aliasing','-Wall'])
diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/src/platform/avr32/MIZAR32/mizar32_conf.h elua-svn-emBLOD/src/platform/avr32/MIZAR32/mizar32_conf.h
--- elua-svn.orig/src/platform/avr32/MIZAR32/mizar32_conf.h	2011-01-15 22:59:47.244199990 +0100
+++ elua-svn-emBLOD/src/platform/avr32/MIZAR32/mizar32_conf.h	2011-01-15 23:05:25.468940576 +0100
@@ -3,6 +3,13 @@
 // Simplemachines.it Mizar32 board has 128Kbytes of flash with 8kb of bootloader
 // To fit in 120K, build using:
 // scons board=mizar32 target=lualong optram=0 allocator=newlib
+//
+// Mizar32 also have 32 MB of SDRAM. The bootloader eLuaBLOD can be used to
+// utilize the SDRAM.
+// To build eLua for SDRAM use something similar to: //TODO: THIS WILL CHANGE
+// scons  board=mizar32_blod target=lualong optram=0 allocator=newlib
+
+

 #ifndef __MIZAR32_CONF_H__
 #define __MIZAR32_CONF_H__
@@ -11,10 +18,10 @@

 // *****************************************************************************
 // Define here what components you want for this platform
-//#define BUILD_MMCFS
+//~ #define BUILD_MMCFS
 //#define BUILD_XMODEM
-//#define BUILD_SHELL
-//#define BUILD_ROMFS
+#define BUILD_SHELL
+#define BUILD_ROMFS
 //#define BUILD_TERM
 #define BUILD_CON_GENERIC
 //#define BUILD_RPC
@@ -137,7 +144,11 @@
 // free in the onboard 32KB RAM, thereby simplifying the memory management.
 //#define MEM_START_ADDRESS     { ( void* )end, ( void* )SDRAM }
 //#define MEM_END_ADDRESS       { ( void* )( 0x8000 - STACK_SIZE_TOTAL - 1 ), ( void* )( SDRAM + SDRAM_SIZE - 1 ) }
-#define MEM_START_ADDRESS     { ( void* )SDRAM }
+
+// When using the bootloader:
+// Some space for eLua is left at the beginning of SDRAM. The size is ELUA_FIRMWARE_SIZE and is set here.
+#define ELUA_FIRMWARE_SIZE 0x80000
+#define MEM_START_ADDRESS     { ( void* )SDRAM + ELUA_FIRMWARE_SIZE}
 #define MEM_END_ADDRESS       { ( void* )( SDRAM + SDRAM_SIZE - 1 ) }

 // *****************************************************************************
diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/src/platform/avr32/platform.c elua-svn-emBLOD/src/platform/avr32/platform.c
--- elua-svn.orig/src/platform/avr32/platform.c	2011-01-15 22:59:47.568197578 +0100
+++ elua-svn-emBLOD/src/platform/avr32/platform.c	2011-01-14 16:48:47.755599113 +0100
@@ -112,6 +112,17 @@
   Disable_global_interrupt();
   INTC_init_interrupts();

+ // Initialize external memory if any.
+#ifdef AVR32_SDRAMC
+#if ELUA_BOARD == MIZAR32
+	sdramc_init( REQ_CPU_FREQ );
+#endif //BOARD == MIZAR32
+	//Assume that the bootloader already have initialized SDRAM. Only minor reinit is necessary.
+#if ELUA_BOARD == MIZAR32_BLOD
+	sdramc_reinit(REQ_CPU_FREQ);
+#endif //BOARD == MIZAR32
+#endif //AVR32_SDRAMC
+
   // Setup clocks
   if( PM_FREQ_STATUS_FAIL == pm_configure_clocks( &pm_freq_param ) )
     return PLATFORM_ERR;
@@ -120,11 +131,6 @@
   // Enable the 32-kHz clock
   pm_enable_clk32_no_wait( &AVR32_PM, AVR32_PM_OSCCTRL32_STARTUP_0_RCOSC );

-  // Initialize external memory if any.
-#ifdef AVR32_SDRAMC
-  sdramc_init( REQ_CPU_FREQ );
-#endif
-
   // Setup UART for eLua
   platform_uart_setup( CON_UART_ID, CON_UART_SPEED, 8, PLATFORM_UART_PARITY_NONE, PLATFORM_UART_STOPBITS_1 );
 #if defined( BUF_ENABLE_UART ) && defined( CON_BUF_SIZE )
diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/src/platform/avr32/pm_conf_clocks.c elua-svn-emBLOD/src/platform/avr32/pm_conf_clocks.c
--- elua-svn.orig/src/platform/avr32/pm_conf_clocks.c	2011-01-15 22:59:47.576201600 +0100
+++ elua-svn-emBLOD/src/platform/avr32/pm_conf_clocks.c	2011-01-14 16:48:47.767604589 +0100
@@ -83,7 +83,10 @@
   Bool b_div2_pba, b_div2_cpu;

   // Switch to external Oscillator 0
-  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
+  //If we come here from a bootloader, we assume osc0 is already running.
+#if ELUA_BOARD == MIZAR32
+  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);	//TODO: mjan
+#endif

   // Start with CPU freq config
   if (in_cpu_f == in_osc0_f)
@@ -143,6 +146,8 @@
   param->cpu_f = pll_freq / (1 << div2_cpu);
   mul--;

+//#if ELUA_BOARD == MIZAR32
+//TODO: Mjan
   pm_pll_setup(&AVR32_PM
   , 0   // pll
   , mul // mul
@@ -158,6 +163,7 @@
   , div2_en // pll_div2
   , 0 // pll_wbwdisable
   );
+//#endif

   rest = pll_freq;
   while (rest > AVR32_PM_PBA_MAX_FREQ ||
@@ -173,10 +179,14 @@
   param->pba_f = pll_freq / (1 << div2_pba);

   // Enable PLL0
-  pm_pll_enable(&AVR32_PM, 0);
+#if ELUA_BOARD == MIZAR32
+  pm_pll_enable(&AVR32_PM, 0); //TODO: Mjan
+#endif

   // Wait for PLL0 locked
-  pm_wait_for_pll0_locked(&AVR32_PM);
+#if ELUA_BOARD == MIZAR32
+  pm_wait_for_pll0_locked(&AVR32_PM); //TODO: Mjan
+#endif

   if (div2_cpu)
   {
@@ -194,11 +204,14 @@
   else
     b_div2_pba = FALSE;

+//#if ELUA_BOARD == MIZAR32
+//TODO: Mjan
   pm_cksel(&AVR32_PM
   , b_div2_pba, div2_pba // PBA
   , b_div2_cpu, div2_cpu // PBB
   , b_div2_cpu, div2_cpu // HSB
   );
+//#endif

   if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
   {
@@ -221,7 +234,9 @@
 #endif
   }

-  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
+#if ELUA_BOARD == MIZAR32
+  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0); //TODO: Mjan
+#endif

   return PM_FREQ_STATUS_OK;
 }
diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/src/platform/avr32/sdramc.c elua-svn-emBLOD/src/platform/avr32/sdramc.c
--- elua-svn.orig/src/platform/avr32/sdramc.c	2011-01-15 22:59:47.564241809 +0100
+++ elua-svn-emBLOD/src/platform/avr32/sdramc.c	2011-01-14 16:50:23.251598428 +0100
@@ -318,3 +318,11 @@
   AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
   AVR32_SDRAMC.tr;
 }
+
+void sdramc_reinit(unsigned long hsb_hz)
+{
+	unsigned long hsb_mhz_dn = hsb_hz / 1000000;
+
+	AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
+	AVR32_SDRAMC.tr;
+}
\ No newline at end of file
diff -d -b -w -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn.orig/src/platform/avr32/sdramc.h elua-svn-emBLOD/src/platform/avr32/sdramc.h
--- elua-svn.orig/src/platform/avr32/sdramc.h	2011-01-15 22:59:47.568197578 +0100
+++ elua-svn-emBLOD/src/platform/avr32/sdramc.h	2011-01-14 16:49:07.059599448 +0100
@@ -85,6 +85,7 @@
  *       and generates an operation corresponding to this mode.
  */
 extern void sdramc_init(unsigned long hsb_hz);
+extern void sdramc_reinit(unsigned long hsb_hz);


 #endif  // _SDRAMC_H_
